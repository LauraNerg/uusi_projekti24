
Getting started with server-side development
Architecture and concepts
Client-server architecture in web applications


Web browser (the Client) loads HTML, CSS, JavaScript, images and other static UI files from the server.
The user interacts with the user interface on the client side.
Based on the interaction, the Client-side Logic prepares a request to send to the server.
The request is sent to the Server.
On the server side, the server-side logic processes the request. This may involve querying a database or performing other operations.
The server generates a response and sends it back to the client. The response can be in the form of HTML, CSS, JavaScript, or data in other formats like JSON or XML.
The client processes the response, updating the User Interface or performing other actions as necessary. This mechanism is often referred to as "Client-Side Rendering".

REST
Representational State Transfer, is an architectural style for designing distributed systems. REST is often used in the context of web services, especially when building APIs. RESTful architecture is based on HTTP protocol. In this course we build a REST interface for client-server communication.

Key concepts of REST:

Statelessness: Each request from a client to a server must contain all the information needed to understand and process the request. The server should not retain any client state between requests. This makes it easier to scale, as there's no session information to manage between requests.
Client-Server: The client and server are separate entities that communicate over a network. The client is responsible for the user interface and user experience, while the server is responsible for processing requests, managing data, and executing most of the business logic.
Resource Identification: Each resource (like a user, product, etc.) is identified by a unique URI (Uniform Resource Identifier). e.g. https://example.com/resource/id
Resource Manipulation through Representations: Clients interact with resources by getting and modifying their representations (usually in formats like JSON or XML).
Self-descriptive Messages: Each message contains enough information about how to process the message (e.g., using HTTP methods and status codes).
Standard Methods: In the context of web services and APIs, REST usually relies on standard HTTP methods:
GET: Retrieve a resource or list of resources.
POST: Create a new resource.
PUT: Update a resource.
DELETE: Remove a resource.
PATCH: Apply partial modifications to a resource.
Status Codes: Each response is served with an appropriate HTTP status code.
REST APIs are popular due to their simplicity, scalability, and performance. When an API adheres to these principles, it's often referred to as a "RESTful" API.

Server-side technologies
Programming language + application framework + database + runtime environment (server) = server-side (back-end) application

Programming language is a tool for writing code, specifying algorithms, and instructing a computer.
Languages like JavaScript, Python, PHP, Java, C#, Ruby, Go, and Rust are commonly used for server-side web development.
Framework is a higher-level structural foundation that provides guidelines, pre-written code, and tools for building applications in a specific domain. Developers often use programming languages within the context of a framework to streamline the development process and adhere to best practices for a particular type of application, such as web development or mobile app development.
Running environment, often referred to as the "runtime environment" or simply the "runtime," is the software and hardware infrastructure where the server-side code of an application executes. This environment provides the necessary resources and services for the server-side code to run, handle requests, process data, and generate responses.
All permanent data used by the application itself or saved by the users of the application is stored in the database
Relational databases like MySQL, PostgreSQL, and NoSQL databases like MongoDB, Cassandra, and Redis are commonly used for storing and retrieving data in web applications.
JavaScript and Node.js
JavaScript is a high-level, often just-in-time compiled language that follows the ECMAScript standard.
The ECMAScript standard does not include any input/output (I/O), such as networking, storage, text, or graphics. In practice, the web browser or other runtime system provides APIs for I/O.
Node.js is a popular runtime environment that allows developers to write server-side code in JavaScript. It is known for its non-blocking, event-driven architecture, making it well-suited for building scalable and high-performance web applications.
Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications. It is often used for creating RESTful APIs.
Tools and Development Environment
Code editor or IDE
Ultimately, it's your choice. VSCode is used by the teachers.

Visual Studio Code (VSCode)
free & open source code editor by Microsoft (!= Visual Studio IDE)
wide extension support
lightweight, multiplatform support
good docs & instructions
choice of many Web developers
Install Extensions: Press ctrl-shift-x or click extensions icon on the left panel. Search and install:

Prettier
EditorConfig for VS Code
Auto Import
ESLint
Basic Usage
Active project is the folder open on the left side panel (File -> Open folder...)

Handy keyboard shortcuts (finnish layout, check File -> Preferences -> Keyboard shortcuts for more)

Multiline comment: ctrl-'
Delete line: ctrl-shift-k
Move line(s): alt-up/down
Copy line(s): alt-shift-up/down
Auto format code: alt-shift-f
Open integrated console: ctrl-รถ
Quick find/open files: ctrl-p
Split editor: ctrl-ยง
Operating system terminal (command line)
Windows:
use Git Bash (included in Git installation)
or built-in: Click on the start or search icon and type "PowerShell" in the search box
Mac: press command-space to open search then type 'Terminal'
Node.js
Install latest Node.js LTS version

A JavaScript runtime built on Chrome's V8 JavaScript engine.
Uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.
Node.js package ecosystem, npm, is the largest ecosystem of open source libraries in the world.
Usage, running a javascript file locally without a web browser:

node my-script.js
npm
npm is the package manager for the Node JavaScript platform and is installed with Node.js.
npm consists of a command line client and an online database of public and paid-for private packages, called the npm registry.
npm packages needed in a project (dependencies) are listed in the package.json file and can be install with npm install command.
locally installed (=project specific) packages are downloaded to node_modules/ folder (should be excluded from version control).
Other tools needed
For source code management Git
Postman, Postman VS Code extension or VS Code REST Client extension
A Relational database management system, DBMS (MariaDB or MySql), Some install instructions
Formatting and Linting
Formatters and linters help maintain code quality and consistency.
Formatters automatically format code according to predefined rules, ensuring a standardized and uniform code style across a project.
Formatters handle tasks such as indentation, spacing, and line breaks, making code more readable and easier to understand.
Linters analyze code for potential errors, bugs, and violations of coding conventions.
Linters enforce best practices, identify potential issues, and provide suggestions for improvement.
Formatters and linters together play a vital role in promoting code quality, reducing bugs, and facilitating collaboration among developers working on the same project.
Formatters
Automatically format code according to predefined rules.
Ensure a standardized and uniform code style across a project.
Handle tasks such as indentation, spacing, and line breaks.
Improve code readability and understandability.
Linters
Analyze code for potential errors, bugs, and violations of coding conventions.
Enforce best practices and coding standards.
Identify potential issues and provide suggestions for improvement.
Facilitate the detection of common programming mistakes.
Both formatters and linters contribute to maintaining code quality and consistency, but they focus on different aspects of the development process. Formatters primarily deal with code formatting and style, while linters primarily focus on code analysis and identifying potential issues.

EditorConfig
is a file format and tool that helps maintain consistent coding styles across different code editors and IDEs.

provides a way to define and enforce coding style preferences such as indentation, line endings, encoding, and whitespace rules.

supports a wide range of programming languages and can be used with various code editors and IDEs, including Visual Studio Code, Sublime Text, and JetBrains IDEs.

can be combined with other tools like ESLint and Prettier to create a comprehensive code styling and formatting setup in your development workflow.

# sample .editorconfig

# Top-most EditorConfig file
root = true

# File encoding
[*]
charset = utf-8

# Indentation settings
[*.js]
indent_style = space
indent_size = 2

[*.css]
indent_style = space
indent_size = 2

[*.html]
indent_style = space
indent_size = 2

# Line endings
[*]
end_of_line = lf

# Trailing whitespace
[*]
trim_trailing_whitespace = true

# New line at the end of the file
[*]
insert_final_newline = true

# Maximum line length
[*.{js,css,html}]
max_line_length = 80